import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { load } from 'js-yaml';
import iconsData from '@iconify-json/material-symbols-light/icons.json' with { type: 'json' };

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.resolve(__dirname, '..');
const docsDir = path.join(rootDir, 'src/content/docs');
const outFile = path.join(rootDir, 'src/components/material-icons.ts');
const available = new Set(Object.keys(iconsData.icons));

function toVarName(name) {
  return name
    .replace(/[^a-zA-Z0-9]+/g, '_')
    .replace(/_+(\w)/g, (_, c) => c.toUpperCase());
}

function parseFrontmatter(content) {
  const match = /^---\n([\s\S]*?)\n---/.exec(content);
  if (match) {
    try {
      return load(match[1]);
    } catch {}
  }
  return {};
}

async function gatherIcons(dir, set) {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  for (const entry of entries) {
    const full = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      await gatherIcons(full, set);
    } else if (/\.(md|mdx)$/.test(entry.name)) {
      const content = await fs.readFile(full, 'utf8');
      const fm = parseFrontmatter(content);
      if (fm && fm.icon && available.has(fm.icon)) set.add(fm.icon);
    }
  }
}

async function generate() {
  const icons = new Set();
  await gatherIcons(docsDir, icons);
  const names = Array.from(icons).sort();

  const lines = [
    '// This file is auto-generated by scripts/generate-icon-imports.mjs',
    '',
  ];

  for (const name of names) {
    const varName = toVarName(name);
    lines.push(`import ${varName} from '~icons/material-symbols-light/${name}';`);
  }

  lines.push('', 'export const materialIcons = {');
  for (const name of names) {
    const varName = toVarName(name);
    lines.push(`  '${name}': ${varName},`);
  }
  lines.push('};', '');

  await fs.writeFile(outFile, lines.join('\n'));
}

generate().catch((e) => {
  console.error(e);
  process.exit(1);
});
