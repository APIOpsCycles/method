{
  "resources": [
    {
      "id": "api-community-engagement-strategies",
      "title": "API Community Engagement Strategies",
      "slug": "resources/api-community-engagement-strategies",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 103,
      "description": "A playbook for fostering API adoption by cultivating communities through content, support channels, feedback loops, and social engagement strategies.",
      "image": "",
      "outcomes": [
        "Better understanding of API community engagement strategies principles",
        "Standardized approach using API Community Engagement Strategies",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Develop marketing strategies to promote APIs to target audiences, including social media, blogs, and webinars.",
          "Create promotional materials (e.g., case studies, success stories) that highlight the value and benefits of APIs.",
          "Create educational materials (e.g., tutorials, documentation) that explain API features, benefits, and usage patterns.",
          "Engage with API consumers through feedback loops, support channels, and community forums to understand their needs and improve API adoption.",
          "Analyze API usage metrics and incorporate user feedback into API iterations."
        ],
        "tips": [
          "Customize the API Community Engagement Strategies for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-compliance-best-practices",
      "title": "API Compliance Best Practices",
      "slug": "resources/api-compliance-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 104,
      "description": "Ensure APIs meet legal, regulatory, and internal compliance through documentation, controls, and automated validations.",
      "image": "",
      "outcomes": [
        "Better understanding of API compliance best practices principles",
        "Standardized approach using API Compliance Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Document compliance measures and ensure they are communicated to stakeholders and consumers.",
          "Implement measures to ensure APIs comply with these requirements, including data encryption, access controls, and audit trails.",
          "Use checklists, linters, and testing tools to verify consistency and conformance with standards."
        ],
        "tips": [
          "Customize the API Compliance Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-development-best-practices",
      "title": "API Development Best Practices",
      "slug": "resources/api-development-best-practices",
      "icon": "edit-document-outline",
      "daft": "true",
      "order": 112,
      "description": "Guidelines promoting consistent, maintainable API codebases using standard libraries, reusable patterns, and aligned development workflows.",
      "image": "",
      "outcomes": [
        "Better understanding of API development best practices principles",
        "Standardized approach using API Development Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Use established frameworks and libraries to implement APIs, ensuring they are reusable and maintainable.",
          "Follow coding standards and best practices to ensure consistent and high-quality API development."
        ],
        "tips": [
          "Customize the API Development Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline",
      "draft": "true"
    },
    {
      "id": "api-metrics-and-analytics",
      "title": "API Metrics And Analytics",
      "slug": "resources/api-metrics-and-analytics",
      "icon": "edit-document-outline",
      "daft": "true",
      "order": 119,
      "description": "A resource for defining, collecting, and analyzing API performance and usage data to align technical KPIs with business outcomes.",
      "image": "",
      "outcomes": [
        "Better understanding of API metrics and analytics principles",
        "Standardized approach using API Metrics And Analytics",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Identify key performance indicators (KPIs) to measure API success against business goals.",
          "Define and monitor performance metrics (e.g., API calls, latency, error rates) and adoption metrics (e.g., NPS).",
          "Monitor API initiatives to ensure adherence to operating guidelines and governance practices"
        ],
        "tips": [
          "Customize the API Metrics And Analytics for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline",
      "draft": "true"
    },
    {
      "id": "api-onboarding-best-practices",
      "title": "API Onboarding Best Practices",
      "slug": "resources/api-onboarding-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 121,
      "description": "Best practices to streamline API consumer onboarding journeys with step-by-step registration, discovery, and first-call guidance.",
      "image": "",
      "outcomes": [
        "Better understanding of API onboarding best practices principles",
        "Standardized approach using API Onboarding Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Define the API consumer journey from discovery to troubleshooting, identifying key touchpoints and pain points.",
          "Develop onboarding processes and resources to help API consumers understand how to use APIs effectively.",
          "Document how consumers find and use the API, including onboarding processes and registration."
          
        ],
        "tips": [
          "Customize the API Onboarding Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-portfolio-management-guidelines",
      "title": "API Portfolio Management Guidelines",
      "slug": "resources/api-portfolio-management-guidelines",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 123,
      "description": "A guide to strategically manage an organization's API suiteâ€”prioritizing APIs, allocating resources, and monitoring performance across lifecycles.",
      "image": "",
      "outcomes": [
        "Better understanding of API portfolio management guidelines principles",
        "Standardized approach using API Portfolio Management Guidelines",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Define portfolio management practices that outline the processes for managing the API portfolio, including prioritization, monitoring, and optimization.",
          "Define budget and resource management practices that outline the processes for managing budgets and resources for API initiatives.",
          "Establish criteria for evaluating and prioritizing budget allocations based on business value, impact, and alignment with strategic initiatives.",
          "Monitor the API portfolio to ensure APIs are delivering value, meeting performance expectations, and aligning with business goals."
        ],
        "tips": [
          "Customize the API Portfolio Management Guidelines for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-security-best-practices",
      "title": "API Security Best Practices",
      "slug": "resources/api-security-best-practices",
      "icon": "edit-document-outline",      
      "draft": "true",
      "order": 130,
      "description": "A set of actionable controls for securing APIs, including authentication, authorization, encryption, rate-limiting, and pipeline-level compliance checks.",
      "image": "",
      "outcomes": [
        "Better understanding of API security best practices principles",
        "Standardized approach using API Security Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Ensure APIs meet security and compliance requirements through automated checks and audits.",
          "Implement security measures such as authentication, authorization, encryption, and rate limiting to protect APIs from threats.",
          "Implement automated security checks and compliance validations in the CI/CD pipeline to ensure APIs are secure and compliant."
        ],
        "tips": [
          "Customize the API Security Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-team-structure-guidelines",
      "title": "API Team Structure Guidelines",
      "slug": "resources/api-team-structure-guidelines",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 132,
      "description": "Organizational guidance for defining roles and responsibilities within API teams to ensure clarity, collaboration, and accountability.",
      "image": "",
      "outcomes": [
        "Better understanding of API team structure guidelines principles",
        "Standardized approach using API Team Structure Guidelines",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Define team structures and roles for API teams, including API product owners, developers, architects, and operations."
        ],
        "tips": [
          "Customize the API Team Structure Guidelines for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-testing-best-practices",
      "title": "API Testing Best Practices",
      "slug": "resources/api-testing-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 133,
      "description": "Guidelines for implementing automated functional, performance, and security testing throughout the API lifecycle.",
      "image": "",
      "outcomes": [
        "Better understanding of API testing best practices principles",
        "Standardized approach using API Testing Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Test APIs for functionality, security, and performance using automated testing tools.",
          "Integrate functional and non-functional testing into the CI/CD pipeline to ensure APIs meet quality standards.",
          "Use automated testing tools to validate API functionality, security, and performance."
        ],
        "tips": [
          "Customize the API Testing Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-training-programs",
      "title": "API Training Programs",
      "slug": "resources/api-training-programs",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 134,
      "description": "A roadmap for upskilling teams with structured learning paths in API design, governance, performance, and security.",
      "image": "",
      "outcomes": [
        "Better understanding of API training programs principles",
        "Standardized approach using API Training Programs",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Identify key API skills and knowledge areas that need enhancement, such as API design, security, and performance.",
          "Encourage continuous learning through online courses, certifications, and community engagement.",
          "Provide training and resources to help teams adopt an API-first mindset and understand the benefits of APIs.",
          "Provide training programs, workshops, and resources to help teams enhance their API skills and knowledge."
        ],
        "tips": [
          "Customize the API Training Programs for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-versioning-best-practices",
      "title": "API Versioning Best Practices",
      "slug": "resources/api-versioning-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 138,
      "description": "Strategies for introducing, maintaining, and retiring API versions while preserving backward compatibility and consumer trust.",
      "image": "",
      "outcomes": [
        "Better understanding of API versioning best practices principles",
        "Standardized approach using API Versioning Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Define versioning strategies for APIs to manage changes and ensure backward compatibility."
        ],
        "tips": [
          "Customize the API Versioning Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "apiops-CI-CD-for-apis",
      "title": "APIOps CI/CD For APIs",
      "slug": "resources/apiops-CI-CD-for-apis",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 140,
      "description": "Deployment guidance that integrates API lifecycle tasksâ€”design, testing, governanceâ€”into continuous integration and delivery pipelines.",
      "image": "",
      "outcomes": [
        "Better understanding of CI/CDfor APIs principles",
        "Standardized approach using CI/CD For APIs",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Use CI/CD pipelines to automate build, test, and deployment processes, ensuring consistent quality and traceability.",
          "Integrate automated tests into the CI/CD pipeline to ensure continuous validation of API quality.",
          "Implement deployment strategies (e.g., blue-green deployments, canary releases) to minimize risks during API releases.",
          "Establish a habit of reviewing metrics and planning continuous improvement activities."

        ],
        "tips": [
          "Customize the CI/CD For APIs for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "competitor-analysis-template",
      "title": "Competitor Analysis Template",
      "slug": "resources/competitor-analysis-template",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 143,
      "description": "A structured worksheet to benchmark your API offerings against competitors by mapping strengths, weaknesses, and value differentiators.",
      "image": "",
      "outcomes": [
        "Better understanding of competitor analysis template principles",
        "Standardized approach using Competitor Analysis Template",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Conduct a competitive analysis to identify key competitors, and their API offerings.",
          "Analyze competitor APIs to understand their strengths, weaknesses, and unique selling points."
        ],
        "tips": [
          "Customize the Competitor Analysis Template for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "contract-first-design",
      "title": "Contract First Design",
      "slug": "resources/contract-first-design",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 146,
      "description": "A guideline advocating for API-first approaches using formal contracts (e.g., OpenAPI) to align stakeholders before development.",
      "image": "",
      "outcomes": [
        "Better understanding of contract first design principles",
        "Standardized approach using Contract First Design",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Apply contract-first or design-first approaches to ensure API contracts are validated before implementation.",
          "Define API contracts that outline the expectations, responsibilities, and usage guidelines for each API.",
          "Use standardized formats (e.g., OpenAPI, AsyncAPI) to create machine-readable API contracts that are easy to share and validate."
        ],
        "tips": [
          "Customize the Contract First Design for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "cross-functional-collaboration-best-practices",
      "title": "Cross Functional Collaboration Best Practices",
      "slug": "resources/cross-functional-collaboration-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 147,
      "description": "Practices to facilitate communication and alignment between business and tech teams when planning or delivering APIs.",
      "image": "",
      "outcomes": [
        "Better understanding of cross functional collaboration best practices principles",
        "Standardized approach using Cross Functional Collaboration Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Encourage cross-functional collaboration between API teams, business units, and stakeholders to align API initiatives with business goals."
        ],
        "tips": [
          "Customize the Cross Functional Collaboration Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "data-privacy-guidelines",
      "title": "Data Privacy Guidelines",
      "slug": "resources/data-privacy-guidelines",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 148,
      "description": "Design considerations to ensure APIs meet data protection regulations like GDPR through anonymization and access controls.",
      "image": "",
      "outcomes": [
        "Better understanding of data privacy guidelines principles",
        "Standardized approach using Data Privacy Guidelines",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Ensure user data privacy by implementing data protection measures, such as anonymization and access controls."
        ],
        "tips": [
          "Customize the Data Privacy Guidelines for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "domain-canvas",
      "title": "Domain Canvas",
      "slug": "resources/domain-canvas",
      "icon": "dashboard-outline",
      "order": 152,
      "description": "A modeling tool to define and communicate the key entities and relationships in your domain, ensuring semantic consistency across APIs.",
      "image": "/assets/resource/Canvas_domainCanvas_en-US.svg",
      "outcomes": [
        "Better understanding of domain canvas principles",
        "Standardized approach using Domain Canvas",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Define core entities, their attributes, and relationships to create a shared conceptual understanding across APIs."
        ],
        "tips": [
          "Customize the Domain Canvas for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "ecosystem-vision-template",
      "title": "Ecosystem Vision Template",
      "slug": "resources/ecosystem-vision-template",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 154,
      "description": "A strategic planning tool to define the API ecosystem, including target partners, value chains, and integration opportunities.",
      "image": "",
      "outcomes": [
        "Better understanding of ecosystem vision template principles",
        "Standardized approach using Ecosystem Vision Template",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Conduct market research to identify trends, opportunities, and threats in the API landscape.",
          "Identify key ecosystem partners and stakeholders who will benefit from or contribute to the ecosystem.",
          "Identify gaps in the market that your APIs can fill, based on competitor offerings.",
          "Identify potential partners whose APIs can enhance your API capabilities and value proposition.",
          "Develop a differentiation strategy that highlights unique features and benefits of your APIs.",
          "Define the ecosystem vision for your APIs, including how they will interact with other systems and platforms.",
          "Design APIs to enable seamless integration and collaboration within the ecosystem."
        ],
        "tips": [
          "Customize the Ecosystem Vision Template for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "industry-standards-and-best-practices",
      "title": "Industry Standards And Best Practices",
      "slug": "resources/industry-standards-and-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 157,
      "description": "A reference resource for aligning API design and operation with widely recognized industry frameworks and specifications.",
      "image": "",
      "outcomes": [
        "Better understanding of industry standards and best practices principles",
        "Standardized approach using Industry Standards And Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Identify industry standards and best practices to ensure APIs are competitive and compliant."
        ],
        "tips": [
          "Customize the Industry Standards And Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "partner-integration-guidelines",
      "title": "Partner Integration Guidelines",
      "slug": "resources/partner-integration-guidelines",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 164,
      "description": "Integration checklists and communication patterns to manage technical and legal aspects of third-party API relationships.",
      "image": "",
      "outcomes": [
        "Better understanding of partner integration guidelines principles",
        "Standardized approach using Partner Integration Guidelines",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Establish integration processes and guidelines for collaborating with partners, including technical integration, data sharing, and support.",
          "Monitor partner API performance and compliance to ensure reliability and alignment with your API strategy."
        ],
        "tips": [
          "Customize the Partner Integration Guidelines for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "role-communication-best-practices",
      "title": "Role Communication Best Practices",
      "slug": "resources/role-communication-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 167,
      "description": "Tools to define and document who is responsible for what within API initiatives, ensuring handoffs and accountability are clear.",
      "image": "",
      "outcomes": [
        "Better understanding of role communication best practices principles",
        "Standardized approach using Role Communication Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Establish clear responsibilities for each role, including API design, development, testing, and operations.",
          "Ensure roles and responsibilities are communicated to all team members and stakeholders to ensure alignment."
        ],
        "tips": [
          "Customize the Role Communication Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "scalable-infrastructure-best-practices",
      "title": "Scalable Infrastructure Best Practices",
      "slug": "resources/scalable-infrastructure-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 168,
      "description": "Architectural guidance to ensure APIs are deployed on infrastructure that can elastically handle usage spikes and growth.",
      "image": "",
      "outcomes": [
        "Better understanding of scalable infrastructure best practices principles",
        "Standardized approach using Scalable Infrastructure Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Design API infrastructure to be scalable and resilient, using cloud-native patterns and technologies.",
          "Monitor infrastructure performance and capacity to ensure it can handle growing demand."

        ],
        "tips": [
          "Customize the Scalable Infrastructure Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "service-agreement-template",
      "title": "Service Agreement Template",
      "slug": "resources/service-agreement-template",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 172,
      "description": "A customizable agreement format that defines expectations, SLAs, responsibilities, and access terms for API consumption.",
      "image": "",
      "outcomes": [
        "Better understanding of service agreement template principles",
        "Standardized approach using Service Agreement Template",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Define service agreements that outline the expectations, service levels, and responsibilities for each API.",
          "Use standardized formats to create machine-readable service agreements that are easy to share and validate.",
          "Ensure service agreements are reviewed and approved by stakeholders to ensure alignment and clarity."
        ],
        "tips": [
          "Customize the Service Agreement Template for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "stakeholder-engagement-best-practices",
      "title": "Stakeholder Engagement Best Practices",
      "slug": "resources/stakeholder-engagement-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 173,
      "description": "Engagement tactics for aligning internal and external stakeholders around shared API goals, value, and governance.",
      "image": "",
      "outcomes": [
        "Better understanding of stakeholder engagement best practices principles",
        "Standardized approach using Stakeholder Engagement Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Engage stakeholders to ensure alignment and support for API initiatives."
        ],
        "tips": [
          "Customize the Stakeholder Engagement Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "test-automation-frameworks",
      "title": "Test Automation Frameworks",
      "slug": "resources/test-automation-frameworks",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 174,
      "description": "Recommended tools and patterns for automating API contract, regression, and integration testing across environments.",
      "image": "",
      "outcomes": [
        "Better understanding of test automation frameworks principles",
        "Standardized approach using Test Automation Frameworks",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Implement test automation frameworks that support contract testing, integration testing, and end-to-end testing."
        ],
        "tips": [
          "Customize the Test Automation Frameworks for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "vendor-management-best-practices",
      "title": "Vendor Management Best Practices",
      "slug": "resources/vendor-management-best-practices",
      "icon": "edit-document-outline",
      "draft": "true",
      "order": 178,
      "description": "Framework for evaluating and managing external API vendors and third-party integrations based on risk, performance, and compliance.",
      "image": "",
      "outcomes": [
        "Better understanding of vendor management best practices principles",
        "Standardized approach using Vendor Management Best Practices",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Establish vendor management processes to evaluate, onboard, and monitor third-party API vendors.",
          "Define criteria for evaluating vendor APIs, including reliability, security, and compliance."
        ],
        "tips": [
          "Customize the Vendor Management Best Practices for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-audit-checklist",
      "title": "API Audit Checklist",
      "slug": "resources/api-audit-checklist",
      "icon": "check-box-outline",
      "order": 180,
      "description": "A comprehensive checklist to verify API readiness before publishing, covering design, documentation, security, and policy compliance.",
      "image": "",
      "snippet": "/snippets/api-audit-checklist.md",
      "outcomes": [
        "Better understanding of API audit checklist principles",
        "Standardized approach using API Audit Checklist",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "Use the API Audit Checklist to ensure the API design meets functional and non-functional requirements, including security, performance, and compliance.",
          "Conduct audits to ensure APIs meet organizational, technical, and legal standards before publishing.",
          "Ensure security models, gateway configuration, and legal terms are clear and accessible to consumers."
        ],
        "tips": [
          "Customize the API Audit Checklist for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "checklist"
    },
    {
      "id": "api-business-model-canvas",
      "title": "API Business Model Canvas",
      "slug": "resources/api-business-model-canvas",
      "icon": "dashboard-outline",
      "order": 3,
      "description": "Strategically assess API business viability by mapping value propositions, consumer segments, and key resources.",
      "image": "/assets/resource/Canvas_apiBusinessModelCanvas_en-US.svg",
      "outcomes": [
        "Clear business strategy for APIs",
        "Identification of key resources and partners",
        "Alignment of API features with business goals"
      ],
      "how_it_works": {
        "steps": [
          "Summarize the API's value proposition",
          "Define consumer segments",
          "Identify developer relations strategies",
          "Map distribution channels",
          "document key resources and activities",
          "Identify key partners and stakeholders",
          "Highlight benefits and costs"
        ],
        "tips": [
          "Start with a single API to ensure clarity",
          "Use metrics like cost vs. benefit to prioritize opportunities",
          "Validate outputs with key stakeholders"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "api-design-principles",
      "title": "API Design Principles",
      "slug": "resources/api-design-principles",
      "icon": "edit-document-outline",
      "order": 183,
      "description": "A concise guide to API usability, discoverability, and consistency grounded in proven design philosophies and user needs.",
      "image": "",
      "snippet": "/snippets/api-style-guide.md",
      "outcomes": [
        "Better understanding of API design principles principles",
        "Standardized approach using API Design Principles",
        "Improved implementation of related API practices"
      ],
      "how_it_works": {
        "steps": [
          "**Consumer-first design:** start every APIOps cycle by gathering user goals and domain terms so APIs solve real problems.",
          "**Consistent naming and behavior:** apply shared conventions for resources, errors and formats to make APIs predictable.",
          "**Contract driven:** capture the interface with OpenAPI or AsyncAPI before coding to align teams and enable automation.",
          "**Usability and discoverability:** provide clear documentation and examples so developers quickly understand how to use the API.",
          "**Iterate safely:** evolve designs in small, versioned increments so changes do not disrupt existing consumers."
        ],
        "tips": [
          "Customize the API Design Principles for your domain",
          "Use it collaboratively across business and tech roles"
        ]
      },
      "category": "guideline"
    },
    {
      "id": "api-value-proposition-canvas",
      "title": "API Value Proposition Canvas",
      "slug": "resources/api-value-proposition-canvas",
      "icon": "dashboard-outline",
      "order": 2,
      "description": "Align API features with user needs by mapping tasks, pains, and gains to API products.",
      "image": "/assets/resource/Canvas_apiValuePropositionCanvas_en-US.svg",
      "outcomes": [
        "Focused feature development",
        "Alignment with user needs",
        "Improved API consumer satisfaction"
      ],
      "how_it_works": {
        "steps": [
          "List user journey tasks",
          "Identify features delivering expected gains",
          "Define features addressing challenges",
          "Map features to API products"
        ],
        "tips": [
          "Use input from the Customer Journey Canvas",
          "Highlight features that relieve pains or enhance gains",
          "Validate features with API consumers to ensure alignment"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "business-impact-canvas",
      "title": "Business Impact Canvas",
      "slug": "resources/business-impact-canvas",
      "icon": "dashboard-outline",
      "order": 4,
      "description": "Design a scalable and secure API platform architecture that meets business and technical requirements.",
      "image": "/assets/resource/Canvas_businessImpactCanvas_en-US.svg",
      "outcomes": [
        "Scalable API infrastructure",
        "Enhanced security and compliance",
        "Improved API performance"
      ],
      "how_it_works": {
        "steps": [
        "Availability Risks: Identify risks and impacts.",
        "Ways to Mitigate Availability Risks: Define mitigation measures.",
        "Security Risks: Document security-related risks.",
        "Ways to Mitigate Security Risks: Propose strategies to mitigate security risks.",
        "Data Risks: Identify risks to data accuracy or availability.",
        "Ways to Mitigate Data Risks: Plan strategies to address data risks."
        ],
        "tips": [
          "Involve architects and developers in the design process",
          "Use past incidents to identify potential risks",
          "Prioritize critical APIs with the highest business impact"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "capacity-canvas",
      "title": "Capacity Canvas",
      "slug": "resources/capacity-canvas",
      "icon": "dashboard-outline",
      "order": 7,
      "description": "Plan API capacity to meet current and future business demands, ensuring scalability and performance.",
      "image": "/assets/resource/Canvas_capacityCanvas_en-US.svg",
      "outcomes": [
        "Aligned API capacity with business volumes",
        "Prepared for future consumption trends",
        "Defined caching and rate-limiting strategies"
      ],
      "how_it_works": {
        "steps": [
          "Document current business volumes",
          "Forecast future consumption trends",
          "Plan for peak load and availability requirements",
          "Define caching and rate-limiting strategies",
          "Propose scaling strategies"
        ],
        "tips": [
          "Use analytics to forecast growth trends",
          "Define peak usage scenarios",
          "Include scalability testing in the planning phase"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "customer-journey-canvas",
      "title": "Customer Journey Canvas",
      "slug": "resources/customer-journey-canvas",
      "icon": "dashboard-outline",
      "order": 1,
      "description": "Map customer journeys to identify needs and pain points, enhancing API design and user experience.",
      "image": "/assets/resource/Canvas_customerJourneyCanvas_en-US.svg",
      "outcomes": [
        "Improved customer understanding",
        "Enhanced API design",
        "Better user experience"
      ],
      "how_it_works": {
        "steps": [
          "Define customer persona",
          "Identify triggers for the journey",
          "Describe the journey's end",
          "Map journey steps with inputs/outputs",
          "Identify customer pains",
          "Summarize customer gains",
          "Define necessary inputs and resulting outputs",
          "Define API interactions for each step"
        ],
        "tips": [
          "Iterate with team input to refine steps",
          "Use outputs from this canvas to inform other canvases like the API Value Proposition Canvas"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "event-canvas",
      "title": "Event Canvas",
      "slug": "resources/event-canvas",
      "icon": "dashboard-outline",
      "order": 12,
      "description": "Design event-driven APIs by defining events, triggers, and processing logic.",
      "image": "/assets/resource/Canvas_eventCanvas_en-US.svg",
      "outcomes": [
        "Defined event-driven architecture",
        "Clear event triggers and processing logic",
        "Improved responsiveness to real-time changes"
      ],
      "how_it_works": {
        "steps": [
          "Identify key events in the system",
          "Define triggers for each event",
          "Describe backend processing logic for events",
          "Specify resulting outputs or acknowledgments"
        ],
        "tips": [
          "Use event schemas to standardize event formats",
          "document event flows and dependencies",
          "Validate event processing with test cases"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "graphql-canvas",
      "title": "GraphQL Canvas",
      "slug": "resources/graphql-canvas",
      "icon": "dashboard-outline",
      "draft": "true",
      "order": 11,
      "description": "Design GraphQL APIs by defining types, queries, mutations, and subscriptions.",
      "image": "/assets/resource/Canvas_graphqlCanvas_en-US.svg",
      "outcomes": [
        "Structured GraphQL API design",
        "Defined types and their relationships",
        "Clear queries, mutations, and subscriptions"
      ],
      "how_it_works": {
        "steps": [
          "What problems are API consumers trying to solve? What data do they need?", 
          "Define GraphQL types and their attributes: What are the core types exposed (e.g., User, Order, Product)?",
          "Map relationships between types: How do types relate to each other in nested queries?",
          "Specify queries for data retrieval",
          "Define mutations for data modification: What operations will modify data (e.g., create, update, delete)?",
          "Outline subscriptions for real-time updates",
          "Define authentication and authorization: Who can access which fields or types?",
          "Consider if there are any pagination, filtering, or rate-limiting constraints"
        ],
        "tips": [
          "Use introspection to validate type definitions",
          "document example queries and mutations",
          "Ensure type names are descriptive and consistent"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "interaction-canvas",
      "title": "Interaction Canvas",
      "slug": "resources/interaction-canvas",
      "icon": "dashboard-outline",
      "order": 9,
      "description": "Define API interactions, workflows, and expected responses to ensure a consistent API consumer experience.",
      "image": "/assets/resource/Canvas_interactionCanvas_en-US.svg",
      "outcomes": [
        "Clear API interaction workflows",
        "Defined inputs and outputs for each interaction",
        "Consistent validation rules across interactions"
      ],
      "how_it_works": {
        "steps": [
          "Map API interactions to user tasks",
          "Define endpoints for each interaction",
          "document inputs and outputs for each interaction",
          "Specify validation rules and constraints",
          "Create interaction models for CRUD, query-driven, command-driven, and event-driven interactions"
        ],
        "tips": [
          "Start with common use cases before handling edge cases",
          "Simulate interactions with mock data to validate workflows",
          "document expected responses for successful and unsuccessful interactions"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "location-canvas",
      "title": "Location Canvas",
      "slug": "resources/location-canvas",
      "icon": "dashboard-outline",
      "order": 6,
      "description": "Map API provider and consumer locations to ensure compliance and performance across regions.",
      "image": "/assets/resource/Canvas_locationsCanvas_en-US.svg",
      "outcomes": [
        "Compliance with local regulations",
        "Optimized API performance across regions",
        "Enhanced understanding of regional requirements"
      ],
      "how_it_works": {
        "steps": [
        "Map locations of API providers.",
        "Document where consumers are located.",
        "Identify applicable regulations.",
        "Document where data must reside.",
        "nsure APIs are accessible in all intended network regions.",
        "Validate network performance across regions."
        ],
        "tips": [
          "Collaborate with legal and compliance teams",
          "Validate network performance across key regions",
          "Proactively resolve location-based constraints"
        ]
      },
      "category": "canvas"
    },
    {
      "id": "rest-canvas",
      "title": "REST Canvas",
      "slug": "resources/rest-canvas",
      "icon": "dashboard-outline",
      "order": 10,
      "description": "Design APIs using RESTful principles, defining resources, verbs, and example requests and responses.",
      "image": "/assets/resource/Canvas_restCanvas_en-US.svg",
      "outcomes": [
        "Consistent RESTful API design",
        "Defined resources and their interactions",
        "Example requests and responses for clarity"
      ],
      "how_it_works": {
        "steps": [
          "Identify key resources exposed by the API",
          "Define the structure of the API resource model",
          "Specify HTTP verbs used to interact with resources",
          "Provide example requests and responses for each verb"
        ],
        "tips": [
          "Use standard HTTP methods (GET, POST, PUT, DELETE)",
          "Ensure resource URIs are intuitive and consistent",
          "document error handling and response codes"
        ]
      },
      "category": "canvas"
    }
  ]
}